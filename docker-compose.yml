services:
  # 前端服務
  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
    container_name: rentrent-frontend
    ports:
      - "3000:3000"
    env_file:
      - ./apps/frontend/.env
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
    depends_on:
      - backend
    volumes:
      - ./apps/frontend:/app/apps/frontend
      - frontend_node_modules:/app/apps/frontend/node_modules
      - frontend_next_cache:/app/apps/frontend/.next
    networks:
      - rentrent-network

  # 後端服務
  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
    container_name: rentrent-backend
    ports:
      - "8000:8000"
    env_file:
      - ./apps/backend/.env
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/rentrent?schema=public
      - REDIS_URL=redis://redis:6379
    depends_on:
      - db
      - redis
    volumes:
      - ./apps/backend:/app/apps/backend
      - backend_node_modules:/app/apps/backend/node_modules
    networks:
      - rentrent-network

  # PostgreSQL 資料庫
  db:
    image: postgres:14
    container_name: rentrent-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: rentrent
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/backend/prisma/migrations:/docker-entrypoint-initdb.d
    networks:
      - rentrent-network

  # Redis 緩存
  redis:
    image: redis:7-alpine
    container_name: rentrent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - rentrent-network

volumes:
  postgres_data:
  redis_data:
  frontend_node_modules:
  frontend_next_cache:
  backend_node_modules:

networks:
  rentrent-network:
    driver: bridge 